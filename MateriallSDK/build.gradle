plugins {
    id 'com.android.library'
    id 'com.github.dcendents.android-maven'
}
group='com.networkconnection.libraries'
version='1.0'


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"



    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"



        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations {
    includeJars // define new configuration
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    includeJars(name:'third_party_legacy_do_not_touch', ext:'jar') // the needed JAR(s) is/are here
//    implementation project(path: ':app')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    //noinspection GradleCompatible
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
}

//
//project.afterEvaluate {
//    def isAndroidLibraryProject = project.plugins.hasPlugin('com.android.library')
//    if(isAndroidLibraryProject) {
//        task copyDeps(type:Copy) {
//            from configurations.includeJars {
//                include '**/*.jar'
//            }
//            into "./build/intermediates/packaged-classes/release/libs" // this folder gets packaged inside the AAR
//        }
//        mergeReleaseJniLibFolders.dependsOn copyDeps // only this stage worked for me - neither earlier, nor later
//
//        task copyDebugDeps(type:Copy) {
//            from configurations.includeJars {
//                include '**/*.jar'
//            }
//            into "./build/intermediates/packaged-classes/debug/libs"
//        }
//        //mergeDebugJniLibFolders.dependsOn copyDebugDeps
//    }
//}
